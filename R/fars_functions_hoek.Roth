## Documenting Code Assignment by RM Hoek

#' fars_read(filename)
#' 
#' This function checks if the filename given exists and assumes the data is in
#' csv format, which it will fromat as data frame.
#' 
#' @param filename A character string representing a filename
#' @return A data.frame with fars data from the file caklled 'filename'
#' 
#' @note although the existance of the file (filename) is checked, it is
#' assumed that the file is in csv format, if not a warning is passed by 
#' readr::read_csv.
#' 
#' @examples fars_read("accident_2015.csv.bz2")
#' 
#' @importFrom ("readr", "read_csv")
#' @importFrom ("dplyr", "tbl_df")

fars_read <- function(filename) {
    if(!file.exists(filename))
        stop("file '", filename, "' does not exist")
    data <- suppressMessages({
        readr::read_csv(filename, progress = FALSE)
    })
    dplyr::tbl_df(data)
}

#' make_filename(year)
#' 
#' This helper function constructs a valid FARS filename from a given year
#' 
#' @param year The year which the datafile is asked for.
#' @return A character string with format: "accident_yyyy.csv.bz2", where
#' yyyy is the year parameter passed.
#' 
#' @Note there is no check whether the number is a valid year for the FARS data,
#' any typo or garbled number will result in a filename, correct or not.
#' 
#' @examples make_filename(2015)
#' 

make_filename <- function(year) {
    year <- as.integer(year)
    sprintf("accident_%d.csv.bz2", year)
}

#' fars_read_years(years)
#' 
#' This function returns a list of data files per year, as specified by the
#' parameter years. The parameter is used to create filenames, using the
#' make_filename helper function. If an invalid year is passed, the return
#' value is NULL
#' 
#' @param years A numeric vector containing the years of which the
#' FARS data is asked
#' @return A list of data.frames or NULL if the year resulted in an invalid file
#' 
#' @note if any of the numbers in years is not valid, the list will contain
#' "NULL" at that index, and a "invalid year" warning will be issued.
#' 
#' @examples 
#' fars_read_years(2015)
#' fars_read_years(c(2013, 2014, 2015))
#' 
#' @importFrom ("dplyr", "mutate", "select")

fars_read_years <- function(years) {
    lapply(years, function(year) {
        file <- make_filename(year)
        tryCatch({
            dat <- fars_read(file)
            dplyr::mutate(dat, year = year) %>% 
                dplyr::select(MONTH, year)
        }, error = function(e) {
            warning("invalid year: ", year)
            return(NULL)
        })
    })
}

#' fars_summarize_years(years)
#' 
#' This function summarises the number of accidents with fatalities per
#' month and year over the years asked for.
#' 
#' @param years A numeric vector containing the years of which the
#' FARS data is asked
#' @return A table of number of accidents with fatalities per month (rows)
#' of the years asked for (columns)
#' 
#' @note if a year is invalid, it is ignored
#' 
#' @examples fars_summarize_years(c(2013, 2014, 2015))
#' 
#' @importFrom ("dplyr", bind_rows", "group_by", "summarize")
#' @importFrom ("tidyr", "spread")
#' 
#' @export

fars_summarize_years <- function(years) {
    dat_list <- fars_read_years(years)
    dplyr::bind_rows(dat_list) %>% 
        dplyr::group_by(year, MONTH) %>% 
        dplyr::summarize(n = n()) %>%
        tidyr::spread(year, n)
}

#' fars_map_state(state.num, year)
#' 
#' This function creates a geographical map depicting the data on accidents
#' with fatalities in a selected state in a particular year.
#' 
#' @param state.num A single number identifying the state (see Note)
#' @param year A single number representing the year from which data is asked
#' @return A graphical representation of the state with fatal accidents plotted
#' by latitude and longitude
#' 
#' @note for state.num decoding table, consult p26 of the pdf document at
#' \url{https://crashstats.nhtsa.dot.gov/Api/Public/Publication/812315}
#' 
#' @examples fars_map_state(6, 2015)
#' 
#' @importFrom ("dplyr", "filter")
#' @importFrom ("maps", "map")
#' @importFrom ("graphics", "points")
#' 
#' @export

fars_map_state <- function(state.num, year) {
    filename <- make_filename(year)
    data <- fars_read(filename)
    state.num <- as.integer(state.num)
    
    if(!(state.num %in% unique(data$STATE)))
        stop("invalid STATE number: ", state.num)
    data.sub <- dplyr::filter(data, STATE == state.num)
    if(nrow(data.sub) == 0L) {
        message("no accidents to plot")
        return(invisible(NULL))
    }
    is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
    is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
    with(data.sub, {
        maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
                  xlim = range(LONGITUD, na.rm = TRUE))
        graphics::points(LONGITUD, LATITUDE, pch = 46)
    })
}